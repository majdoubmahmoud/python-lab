# -*- coding: utf-8 -*-
"""Python TD2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BuksDPZVWO4X_maWhoT7-_VMT3Qo0yFQ

Exercice 1 :
Ecrire un programme qui permet de calculer la moyenne de notes fournies au clavier avec un dialogue de ce type :

note 1 : 12

note 2 : 15.25

note 3 : 13.5

note 4 : 8.75

note 5 : -1

moyenne de ces 4 notes : 12.37

Le nombre des notes n’est pas connu a priori et l’utilisateur peut en fournir autant qu’il le désire. Pour signaler qu’il a terminé, on convient qu’il fournira une note fictive négative. Celle-ci ne devra naturellement pas être prise en compte dans le calcul de la moyenne.
"""

s=0
n=0
i=1
while True:
  note=float (input());
  print ('note ',i,':',note)
  i+=1;
  if note>=0:
   s+=note;
   n+=1;
  if note<0:
    break
print ('La moyenne de ces ',n,'notes:',s/(n))

"""Exercice 2 :
1. Ecrire deux fonctions :

— pair (nbre), qui renvoie True, si le nombre est Pair

— impair (nbre), qui renvoie True, si le nombre est Impair
NB : Le nombre sera demandé à l’utilisateur.
2. Dans le même script, tester les fonctions éditées précédemment
"""

def pair(nb):
  print ('Test de la fonction Pair')
  if (nb % 2) == 0:
    value = True
  else:
    value = False
  return value

def impair(nb):
  print ('Test de la fonction Impair')
  if (nb % 2) == 0:
    value = False
  else:
    value = True
  return value

n=int(input("Entrez un nombre: "))
#pair(n)
impair(n)

"""Exercice 3 :
1. Écrire une fonction conversion () qui reçoit deux arguments, un réel et une
chaine de caractères ‘mile’ ou ‘km’, et qui retourne la conversion Mile/Km avec: 1mile = 1.609344 km
3. Dans le même script, tester la fonction conversion () dont ses deux arguments
sont saisis en utilisant la fonction input()
"""

def conversion(valeur,unite):
  unite=unite.lower()
  if unite=="mile":
    resultat=(valeur*1.609344)
  elif unite=="km":
    resultat=(valeur/1.609344)
  else:
    print ("Unité indéterminée")
  return(resultat)

valeur=float(input("entrer une distance "))
unite=input("Entrez l'unité (mile/km)? ")
conversion(valeur,unite)

"""Exercice 4 : Tester la sécurité de votre mot de passe


Le but de l’exercice est d’implémenter une application primaire qui évalue la fiabilité du mot de passe (mdp) saisi par l’utilisateur.

Selon la valeur du score, la fiabilité du mdp varie de ‘Très faible’ jusqu’à ‘Très fort’ :

Si le score <20, le mdp est ‘Très faible’

Sinon si le score<40, le mdp est ‘Faible’

Sinon si le score <80, le mdp est ‘Fort’

Sinon le mdp est ‘Très fort’

Le score se calcule comme suit :

• Nombre total de caractères * 4 + (Nombre total de caractères–nombre de lettres
majuscules) * 2 + (Nombre total de caractères – nombre de lettres minuscules) *
3 + Nombre de caractères non alphabétiques * 5

Solution 1: Sans fonctions
"""

mdp=input("Saisissez votre mot de passe: ")
total=len(mdp)
l, u, s = 0, 0, 0
capitalalphabets="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
smallalphabets="abcdefghijklmnopqrstuvwxyz"

for i in mdp:
  # counting lowercase alphabets
  if (i in smallalphabets):
    l+=1
  # counting uppercase alphabets
  elif (i in capitalalphabets):
    u+=1
  # counting non alphabets
  else:
    s+=1

score= ((total*4)+((total-u)*2)+((total-l)*3)+(s*5))
if score<20:
  print("Très faible")
elif score<40:
  print("Faible")
elif score<80:
  print("Fort")
else:
  print("Très fort")

"""Solution 2: Avec les fonctions NbCMin(mdp) / NbCMaj(mdp) / NbCAlpha(mdp)"""

mdp=input("Saisissez votre mot de passe: ")
total=len(mdp)

#fonction NbCMin(mdp) qui retourne le nombre de caractères minuscules
def NbCMin(mdp):
  l=0
  smallalphabets="abcdefghijklmnopqrstuvwxyz"
  for i in mdp:
    if (i in smallalphabets):
      l+=1
  return(l)

#fonction NbCMaj(mdp) qui retourne le nombre de caractères majuscules
def NbCMin(mdp):
  u=0
  capitalalphabets="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  for i in mdp:
    if (i in capitalalphabets):
      u+=1
  return(u)

#fonction NbCAlpha(mdp) qui retourne le nombre de caractères non alphabétiques
def NbCAlpha(mdp):
  s=0
  smallalphabets="abcdefghijklmnopqrstuvwxyz"
  capitalalphabets="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  for i in mdp:
    if i not in (capitalalphabets and smallalphabets):
      s+=1
  return(u)

score= ((total*4)+((total-NbCAlpha(mdp))*2)+((total-NbCMin(mdp))*3)+(NbCAlpha(mdp)*5))
if score<20:
  print("Très faible")
elif score<40:
  print("Faible")
elif score<80:
  print("Fort")
else:
  print("Très fort")

"""Exercice 5 : Système Anti-veille pour le conducteur"""

from scipy.spatial import distance

def eye_aspect_ratio(eye):
  A = distance.euclidean(eye[1], eye[5])
  B = distance.euclidean(eye[2], eye[4])
  C = distance.euclidean(eye[0], eye[3])
  EAR = (A + B) / (2.0 * C)
  return (EAR)

eye = [[283,340], [293, 337], [304, 338], [312, 346], [302, 348], [291, 346]]
EAR= eye_aspect_ratio(eye)
print ("EAR is : ", EAR)
EAR_Thres = 0.3
nfTotal = 20
NfSeuil= 0

if EAR > EAR_Thres:
  print ("Drowsy")