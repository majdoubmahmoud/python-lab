# -*- coding: utf-8 -*-
"""Python TD1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15s4lckJUGzCESdT797NSjCC1NEsXVYa0

Exercice 1:
Écrire un programme, qui définit 3 variables :

une variable de type texte,

une variable de type nombre entier,

une variable de type nombre décimal

et qui affiche leur type.
"""

ch = "MAJDOUB Mahmoud";
ent = 2;
dec = 7.6;
print("ch is: ", type(ch));
print("ent is: ", type(ent));
print("dec is: ", type(dec));

"""Exercice 2:
Affecter dans une même ligne les 3 variables précédemment définies.
"""

ch = "MAJDOUB Mahmoud";
ent = 2;
dec = 7.6;
Concate = ch+' '+str(ent)+' '+str(dec)
print(Concate);

"""Exercice 3:
Ecrire un programme qui permet de détecter le nombre de voyelles, de consonnes et des caractères spéciaux dans une phrase saisie par l’utilisateur.
"""

str1 = ('chaine chch')
vowels = 0
consonants = 0
str1.lower()

for i in str1:
    if (i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u'):
        vowels += 1
    else:
        consonants += 1

print("Total Number of Vowels in this String = ", vowels)
print("Total Number of Consonants in this String = ", consonants)

"""Exercice 4:
Ecrire un programme qui permet de calculer et afficher f(x)=sin(x)/x pour x dans [-90,90] avec un pas d’avancement 10.


• Constater!!!


• En étudiant les exceptions de cette expression et pour intercepter l’erreur, attribuer la valeur ‘1,0’ lorsque le programme rencontre une erreur d’exécution


• Changer l’expression de gestion de cette exception par la syntaxe « pass ». Constater
"""

# Constation : Il y'a une valeur qui retourne nan : x = 0
# Gestion de l'exception : if x ==0 : print(1.0)
import numpy as np;
for x in range(-90, 90, 10):
    if x==0 :
        pass;
    else:
        print(np.sin(x)/x);

import sys
import math
import matplotlib.pyplot as plt
import numpy as np

# x = range(-90,100,10)
# x = np.arange(-90,100,10) # wih numpy
# print(x)
# v=0
#z = []
y = []

x = np.arange(-90,100,10)

for i in x:
  try:

    y.append(math.sin(math.radians(i))/math.radians(i))
    #y.append(np.sin(np.radians(i))/np.radians(i))
    #z.append(math.sin(math.radians(i))/i)
    #print(i)
    #print(y)
  except:
    print("wow")
    c = 1.0
    y.append(c)

#print(y)


plt.title('Courbe de f(x)')
plt.plot(x,y)
plt.xlabel('Degree')
plt.ylabel('Sin(x)/x')
plt.text(-25, .8, r'f(x)= sin(x)/x')
plt.grid(True)
plt.show()

"""Exercice 5:
Ecrire un programme qui demande deux nombres à l’utilisateur et l’informe ensuite si leur produit est négatif ou positif.

(NB: Ne pas calculer le produit des deux nombres).
"""

a=int(input('Saisir un entier: '));
b=int(input('Saisir un autre entier: '));

if (a<0 and b<0) or (a>0 and b>0):
    print('le produit est positif');
else:
    print('le produit est negatif');

"""Exercice 6:
Ecrire un programme qui demande un entier de départ, et qui ensuite affiche les cinq entiers qui suivent.
"""

nb=int(input('Saisir un entier de depart: '));
if nb>0:
    for i in range(nb+1,nb+6,1):
        print(i);

"""Exercice 7:
Ecrire un programme qui permet de calculer le montant des heures supplémentaires d’un employé, sachant le prix unitaire d’une heure selon le barème suivant:


— Les 39 premières heures sans supplément,

— De la 40ième à la 44ième heure sont majorées de 50%,


— De la 45ième à la 49ième heure sont majorées de 75%,


— De la 50ième heure ou plus, sont majorées de 100%.
"""

nb_heures=int(input("Saisir le nombre d'heures: "));
prix=float(input("Saisir le prix unitaire d'une heure: "));
montant=0
if nb_heures<=39:
    montant=0;
elif  nb_heures<45 :
    montant=(nb_heures-39)*(prix*1.5);
elif  nb_heures <50 :
    montant =(5*prix*1.5)+(nb_heures-44)*(prix*1.75);
else:
    montant =(5*prix*1.5)+(5*prix*1.75)+(nb_heures-49)*(prix*2);

print("Le montant des heures supplementaires est : ",montant);

"""Exercice 8:
Ecrire programme permettant de lire un nombre entier N puis calcule son factoriel.
— N!=1*2*3*.......*(n-1)*N
— 0 !=1
1. Utiliser for,
2. Utiliser while.
"""

nb = int(input('Entrez un nombre : '));
if nb==0 or nb==1 :
    factoriel = 1;

#Avec boucle for:

#else :
    #factoriel = 1;
    #for i in range(2, nb+1):
          #factoriel = factoriel * i;


#Avec boucle While:

else :
    factoriel = 1;
    n=nb
    while(nb > 1):
        factoriel *= nb;
        nb -= 1

print (n,'!= ',factoriel);

"""Exercice 9:
Définir la liste : liste =[17, 38, 10, 25, 72], puis effectuez les actions suivantes :


– triez et affichez la liste ;


– ajoutez l’élément 12 à la liste et affichez la liste ;


– renversez et affichez la liste ;


– affichez l’indice de l’élément 17 ;


– enlevez l’élément 38 et affichez la liste ;


– affichez la sous-liste du 2ème au 3ème élément ;


– affichez la sous-liste du début au 2ème élément ;


– affichez la sous-liste du 3ème élément à la fin de la liste ;


– affichez la sous-liste complète de la liste ;


– affichez le dernier élément en utilisant un indexage négatif.
"""

liste = [17,38,10,25,72];
print(liste);
#trie de la liste
liste.sort();
#Affichage de liste triée
print('Liste triée: ',liste);
#Ajouter un nombre
liste.append(12);
print('Liste aprés l ajout d un element: ',liste)
#Renverser la Liste
liste.reverse();
print('Liste aprés la reverse : ',liste)
#Afficher l'indice du N° 17
print('L indice de N° 17 : ',liste.index(17));
#Enlever le N° 38
liste.remove(38);
#Afficher liste apres l enlevemnt du N° 38
print('liste apres l enlevemnt du N° 38 : ',liste);
#Sous Liste 2ème au 3ème élément
print('Sous-liste du 2ème au 3ème élément : ', liste[2:3]);
# sous-liste du début au 2ème élément
print('Sous-liste du début au 2ème élément : ', liste[:2]);
# sous-liste du 3ème élément à la fin de la liste
print('Sous-liste du 3ème élément à la fin de la liste : ', liste[3:]);
# Affichez la sous-liste complète de la liste
print('Sous-liste complète de la liste : ', liste[:]);
#Affichez le dernier élément en utilisant un indexage négatif
print('Dernier élément en utilisant un indexage négatif : ', liste[-1]);

"""Exercice 10:

Écrire un programme chaine.py qui donne le nombre de caractères de chaque élément d’un tuple qui contient uniquement des chaines de caractères.
"""

__tuple =();
n = int(input('Donner le nombre des mots : '));
phrase ='';
for i in range(n):
    phrase=input('Donner un mot : ');
    __tuple+=(phrase,);

for i in range(len(__tuple)):
    print('taille de la chaine : ',__tuple[i],' est : ', len(__tuple[i]));